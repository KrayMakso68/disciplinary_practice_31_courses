# Generated by Django 4.2.1 on 2023-05-04 15:43

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Курсант'), (2, 'Командир отделения'), (3, 'Командир группы'), (4, 'Курсовой офицер'), (5, 'Старшина курса'), (6, 'Начальник курса')], null=True, verbose_name='Должность')),
                ('first_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Фамилия')),
                ('surname', models.CharField(blank=True, max_length=50, null=True, verbose_name='Отчество')),
                ('rang', models.CharField(blank=True, choices=[('ряд.', 'Рядовой'), ('мл.с-т', 'Мл.Сержант'), ('с-т', 'Сержант'), ('ст.с-т', 'Ст.Сержант'), ('пр-к', 'Прапорщик'), ('ст.пр-к', 'Ст.Прапорщик'), ('л-т', 'Лейтенант'), ('ст.л-т', 'Ст.Лейтенант'), ('к-н', 'Капитан'), ('м-р', 'Майор'), ('п/п-к', 'Подполковник'), ('п-к', 'Полковник')], max_length=50, null=True, verbose_name='Воинское звание')),
                ('slug', models.SlugField(blank=True, help_text='Заполняется автоматически!', max_length=255)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('Поощрение', 'Поощрение'), ('Взыскание', 'Взыскание'), ('Снятие ранее применённого взыскания', 'Снятие ранее применённого взыскания')], max_length=40, verbose_name='Вид записи')),
                ('text', models.TextField(verbose_name='Текст записи')),
                ('date', models.DateTimeField(default=datetime.datetime(2023, 5, 4, 18, 43, 7, 424492), verbose_name='Дата')),
                ('check_active', models.BooleanField(default=True, verbose_name='Активно')),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('cadet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to=settings.AUTH_USER_MODEL, verbose_name='Кому')),
                ('who_gave', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='written_notes', to=settings.AUTH_USER_MODEL, verbose_name='Кем дано')),
            ],
            options={
                'verbose_name': 'Запись',
                'verbose_name_plural': 'Записи',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, unique=True, verbose_name='Название позразделения')),
                ('slug', models.SlugField()),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='children', to='main.category', verbose_name='Родительская категория')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
                'unique_together': {('parent', 'slug')},
            },
        ),
        migrations.AddField(
            model_name='customuser',
            name='category',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='staff', to='main.category', verbose_name='Подразделение'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
